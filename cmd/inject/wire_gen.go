// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package inject

import (
	"github.com/Lofanmi/gobana/internal/app"
	"github.com/Lofanmi/gobana/internal/config"
	"github.com/Lofanmi/gobana/internal/logic/logic_aggregation_parser"
	"github.com/Lofanmi/gobana/internal/logic/logic_backend_factory"
	"github.com/Lofanmi/gobana/internal/logic/logic_log_parser"
	"github.com/Lofanmi/gobana/internal/logic/logic_lua_state"
	"github.com/Lofanmi/gobana/internal/logic/logic_query_builder"
	"github.com/Lofanmi/gobana/internal/svc_impls/svc_config"
	"github.com/Lofanmi/gobana/internal/svc_impls/svc_logger"
)

// Injectors from wire.gen.go:

func NewApplication() (*app.Application, func(), error) {
	application := config.GetConfigApplication()
	backendList := config.GetConfigBackendList()
	service := &svc_config.Service{
		BackendListConfig: backendList,
	}
	backendFactory := logic_backend_factory.NewBackendFactory(backendList)
	queryBuilder := &logic_query_builder.QueryBuilder{}
	luaState := &logic_lua_state.LuaState{}
	logParser := &logic_log_parser.LogParser{
		LuaState: luaState,
	}
	aggregationParser := &logic_aggregation_parser.AggregationParser{}
	svc_loggerService := &svc_logger.Service{
		BackendListConfig: backendList,
		BackendFactory:    backendFactory,
		QueryBuilder:      queryBuilder,
		LogParser:         logParser,
		AggregationParser: aggregationParser,
	}
	appApplication := &app.Application{
		ConfigApplication: application,
		Config:            service,
		Logger:            svc_loggerService,
	}
	return appApplication, func() {
	}, nil
}
